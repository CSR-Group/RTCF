{"version":3,"sources":["component/MainPage.js","../../../dsynk-cl/js/src/relay.js","../../../dsynk-cl/js/src/state.js","../../../dsynk-cl/js/src/dsynk.js","App.js","serviceWorker.js","index.js"],"names":["mdParser","MarkdownIt","MainPage","props","console","log","state","sessionid","object","get","currentState","lineKeys","Object","keys","sort","editorText","i","length","e","message","previousState","prevLineKeys","prevIndex","currentIndex","j","html","text","this","split","currLine","prevLine","isNewInBetweenLine","set","parseFloat","del","lastKey","getTextFromMap","className","Menu","Item","header","Header","as","color","Content","name","value","renderHTML","render","onChange","change","handleEditorChange","config","view","menu","md","fullScreen","hideMenu","table","maxRow","maxCol","syncScrollMode","React","Component","client","Client","connect","onConnect","dsynkHubHost","a","brokerURL","frame","onStompError","headers","body","activate","publish","topic","from","eventMessage","JSON","stringify","connectAndDo","destination","initializeState","stateDefinition","eventHandler","subscribe","getState","mgmtTopic","mgmtHandler","sessionTopic","clientID","action","connected","DataType","int64","str","doc","State","definition","callback","intVars","strVars","docVars","typeMap","type","variableName","docKey","toFixed","toString","event","parse","key","line","undefined","delValue","parsedState","integers","strings","docs","uuidv4","idToSessionMap","sessionToStateMap","createSession","hostAddress","requestOptions","method","redirect","fetch","sessionInfoResponse","json","sessionInfo","id","onChangeCallback","hub","ip","port","handle","getSession","sessionId","buildState","App","app","setState","createReplicatedObject","handleStateChange","then","session","getReplicatedObject","Grid","verticalAlign","columns","centered","Row","inverted","icon","textAlign","Button","onClick","createNewSession","Segment","Input","content","joinSession","placeholder","target","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.394dd44e.chunk.js","sourcesContent":["import React from 'react';\nimport MarkdownIt from 'markdown-it'\nimport MdEditor from 'react-markdown-editor-lite'\nimport 'react-markdown-editor-lite/lib/index.css';\nimport { Menu, Header, Segment, Container } from 'semantic-ui-react'\nimport \"./MainPage.css\"\n// import { joinSession, getSession, sendEvent } from 'dsynk';\n\n\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\n\nclass MainPage extends React.Component {\n\n    getTextFromMap(object) {\n\n        try {\n            // return object.get(\"document\"); \n            // return object.get(\"textarea\")[0];\n\n            console.log(object.get(\"textarea\"));\n            var currentState = object.get(\"textarea\"); \n            var lineKeys = Object.keys(currentState).sort();\n    \n            var editorText = \"\"\n            for(var i = 0; i < lineKeys.length; i++) {\n                editorText = editorText + currentState[lineKeys[i]]\n                if(i < lineKeys.length-1) {\n                    editorText = editorText + \"\\n\"\n                }\n            }\n            return editorText;    \n\n        } catch (e) {\n            console.log(e.message)\n            return \"\";\n        }   \n    }\n\n    constructor(props) {\n        super(props);\n        console.log(props);        \n        this.state = {\n            sessionid: props.state.sessionid, \n            object: props.state.object,\n        };\n    }\n\n    isNewInBetweenLine(currentState, previousState, prevLineKeys, prevIndex, currentIndex) {\n        // return i+1 < currentState.length && prevLine == currentState[i+1];\n        if(currentIndex+1 >= currentState.length || currentState.length !== prevLineKeys.length + 1) {\n            return false; \n        }\n        var i = currentIndex + 1;\n        var j = prevIndex; \n\n        while(i < currentState.length && j < prevLineKeys.length) {\n            if(currentState[i] !== previousState[prevLineKeys[j]]) {\n                return false; \n            }\n            i++; \n            j++;\n        }\n        return true; \n    }\n\n    handleEditorChange({html, text}) {\n        // console.log('handleEditorChange', html, text);\n        var previousState = this.state.object.get(\"textarea\"); \n        var currentState = text.split(\"\\n\"); \n\n        console.log(\"prevstate: \", previousState)\n        console.log(\"currstate: \",currentState)\n        var prevLineKeys = Object.keys(previousState).sort();\n        console.log(\"prevLineKeys: \",prevLineKeys)\n\n        var prevIndex = 0; \n        var i = 0; \n        // TODO : handle empty current doc \n\n        for(; i < currentState.length && prevIndex < prevLineKeys.length; i++) {\n\n            var currLine = currentState[i]; \n            var prevLine = previousState[prevLineKeys[prevIndex]]; \n\n            console.log(\"currLine: \",currLine)\n            console.log(\"prevLine: \",prevLine)\n            \n            if(currLine !== prevLine) {\n            \n                // new line in between two old lines\n                if(this.isNewInBetweenLine(currentState, previousState, prevLineKeys, prevIndex, i)) {\n                    this.state.object.set(\"textarea\",currentState[i],(parseFloat(prevLineKeys[prevIndex-1]) + parseFloat(prevLineKeys[prevIndex]))/2.0);\n                    console.log(\"new inbetween line detected\");\n                } \n                // line deleted \n                else if(prevIndex+1 < prevLineKeys.length && currLine === previousState[prevLineKeys[prevIndex+1]]) {\n                    this.state.object.del(\"textarea\", parseFloat(prevLineKeys[prevIndex]));\n                    console.log(\"delete inbetween line detected\");\n                    prevIndex+=2; \n                } else {\n                    console.log(\"line change detected\");\n                    this.state.object.set(\"textarea\",currLine,parseFloat(prevLineKeys[prevIndex]));\n                    prevIndex++; \n                }\n            } else {\n                prevIndex++; \n            }\n        }\n\n        var lastKey = parseFloat(prevLineKeys[prevLineKeys.length-1])\n        while(i < currentState.length) {\n            console.log(\"new line detected\");\n            this.state.object.set(\"textarea\",currentState[i],lastKey + 1);\n            lastKey +=1;\n            i++;\n        }\n\n        // var prevState = this.state.get(\"textarea\"); \n        // for(var key in prevState)\n    }\n\n    render() {\n\n        console.log(\"Rendering editor\");\n        console.log(this.state.object)\n        var text = this.getTextFromMap(this.state.object)\n\n        return (\n            <div className=\"mainpage\">\n                <Menu>\n                    <Menu.Item header>\n                        <Header as='h1' color='violet'>\n                                {/* <Icon name='users' circular /> */}\n                                <Header.Content>Dsynk Editor</Header.Content>\n                        </Header>\n                    </Menu.Item>\n                    <Menu.Item\n                        name='session-name'>\n                        {this.state.sessionid}\n                    </Menu.Item>\n                </Menu>\n\n                <div className=\"editor\">\n                    <MdEditor\n                        value={text}\n                        renderHTML={(text) => mdParser.render(text)}\n                        onChange={(change) => this.handleEditorChange(change)}\n                        config={{\n                            view: {\n                              menu: true,\n                              md: true,\n                              html: true,\n                              fullScreen: true,\n                              hideMenu: true,\n                            },\n                            table: {\n                              maxRow: 6,\n                              maxCol: 6,\n                            },\n                            syncScrollMode: ['leftFollowRight', 'rightFollowLeft'],\n                          }}              \n                    />\n                </div>\n            </div>\n        );\n      };\n    \n}\n\n\nexport default MainPage;","import { Client, Message } from '@stomp/stompjs';\n\nconst client = new Client();\n\nasync function connect(onConnect, dsynkHubHost) {\n    client.brokerURL = \"ws://\" + dsynkHubHost + \"/session\";\n    console.log(\"connecting..\");\n    client.onConnect = function(frame) {\n        console.log(\"connected..\");\n        onConnect();\n      };      \n    client.onStompError = function (frame) {\n        console.log('Broker reported error: ' + frame.headers['message']);\n        console.log('Additional details: ' + frame.body);\n    };\n    \n    client.activate();\n}\n\nfunction disconnect() {\n    client.deactivate();\n}\n\nasync function subscribe(dsynkHubHost, topic, handler) {\n    await connectAndDo(dsynkHubHost, () => client.subscribe(topic,handler));\n}\n\nasync function publish(dsynkHubHost, topic, from, message) {\n    var eventMessage = JSON.stringify({'topic' : topic, \n                                       'from' : from,\n                                       'message': message });\n    console.log(\"sending event : \" + eventMessage);\n    await connectAndDo(dsynkHubHost, () => client.publish({destination: \"/state/event\", body: eventMessage})); \n}\n\nasync function initializeState(dsynkHubHost, topic, from, stateDefinition, eventHandler) {\n    \n    console.log(\"initialize state : \" + stateDefinition);\n\n    var message = JSON.stringify({'topic' : topic, \n                                  'from' : from,\n                                  'variables': stateDefinition });\n    await connectAndDo(dsynkHubHost, () => {\n        client.publish({destination: \"/state/create\", body: message});\n        client.subscribe(topic, eventHandler);\n    }); \n}\n\nasync function getState(dsynkHubHost, mgmtTopic, mgmtHandler, sessionTopic, eventHandler, clientID) {\n    await connectAndDo(dsynkHubHost, () => {\n        client.subscribe(sessionTopic, eventHandler);\n        client.subscribe(mgmtTopic, mgmtHandler);\n        var message = JSON.stringify({'topic' : sessionTopic, \n                                      'clientid' : clientID});\n        client.publish({destination: \"/state/get\", body: message});\n    }); \n}\n\nasync function connectAndDo(dsynkHubHost, action) {\n\n    if(!client.connected) {\n        var onConnect = function() {\n            action();\n        }\n        await connect(onConnect, dsynkHubHost);\n    }\n    else {\n        action();\n    }\n}\n\nexport { subscribe, publish, initializeState, getState}; \n","import { subscribe, publish } from \"./relay\";\n\nconst DataType = {\n  int64: 'int64',\n  str: 'str',\n  doc: 'doc'\n}\n\nclass State  {\n  /*\n      input: \n         {\n              \"asd\": {type: \"int\", value=\"0\"}\n              \"asd2\": {type: \"doc\", value=\"0\"}, \n              \"adsad\": {type: \"doc\", value=\"1\"}, \n          }\n   */\n\n  constructor(definition, clientID, topic, dsynkHubHost, callback) {\n\n      this.intVars = {};\n      this.strVars = {}; \n      this.docVars = {};\n      this.typeMap = {}; \n      this.clientID = clientID;\n      this.topic = topic;\n      this.dsynkHubHost = dsynkHubHost;\n      this.callback = callback; \n\n      for(var name in definition) {\n          if(definition[name].type === DataType.int64) {\n              this.intVars[name] = definition[name].value; \n              this.typeMap[name] = DataType.int64;\n          }\n          if(definition[name].type === DataType.str) {\n              this.strVars[name] = definition[name].value; \n              this.typeMap[name] = DataType.str;\n          }\n          if(definition[name].type === DataType.doc) {\n              this.docVars[name] = { \"0.00000\" : definition[name].value }; \n              this.typeMap[name] = DataType.doc;\n          }\n      }\n  }\n\n  del(variableName, docKey) {\n    \n    var message; \n    if(!(variableName in this.typeMap)) {\n      throw \"variable \" + variableName + \" does not exist\"; \n    }\n    docKey = docKey.toFixed(5)\n    var type = this.typeMap[variableName];\n    if(variableName in this.docVars) {\n      delete this.docVars[variableName][docKey];\n      message = { 'type': DataType[type],\n                  'key': variableName,\n                  'line': docKey,\n                  'delValue': \"DELETE\"}  \n    }\n    publish(this.dsynkHubHost, this.topic, this.clientID, message);\n  }\n\n  set(variableName, value = '0', docKey = -1) {\n    if(!(variableName in this.typeMap)) {\n      throw \"variable \" + variableName + \" does not exist\"; \n    }\n\n    var type = this.typeMap[variableName];\n    var message; \n    docKey = docKey.toFixed(5)\n\n    if(type === DataType.int64) {\n      this.intVars[variableName] = value;\n      message = { 'type': DataType[type],\n                  'key': variableName,\n                  'value': value.toString()}\n    }\n    if(type === DataType.str) {\n      this.strVars[variableName] = value;\n      message = { 'type': DataType[type],\n                  'key': variableName,\n                  'value': value}\n    }\n    if(type === DataType.doc) {\n      this.docVars[variableName][docKey] = value;\n      message = { 'type': DataType[type],\n                  'key': variableName,\n                  'line': docKey,\n                  'value': value}\n    }\n\n    publish(this.dsynkHubHost, this.topic, this.clientID, message);\n  }\n\n  get(variableName) {\n    if(!(variableName in this.typeMap)) {\n      throw \"variable \" + variableName + \" does not exist\"; \n    }\n\n    var type = this.typeMap[variableName];\n    if(type === DataType.int64) {\n      return this.intVars[variableName];\n    }\n    if(type === DataType.str) {\n      return this.strVars[variableName];\n    }\n    if(type === DataType.doc) {\n      return this.docVars[variableName];\n    }\n  }\n\n  handle(message) {\n\n    console.log(\"handle change:\",message);\n    const event = JSON.parse(message.body);\n\n    if(event.from === this.clientID) {\n      return;\n    }\n \n    var change = event.message; \n    var type;\n\n    if(!(change.key in this.typeMap)) {\n      type = change.type;\n    } else {\n      type = this.typeMap[change.key];\n    }\n\n    if(type === DataType.int64) { \n      console.log(\"change state : \" + change.key + \" - \"+ change.value);\n      this.intVars[change.key] = change.value;\n    }\n    if(type === DataType.str) {\n      console.log(\"change state : \" + change.key + \" - \"+ change.value);\n      this.strVars[change.key] = change.value;\n    }\n    if(type === DataType.doc) {\n      console.log(change.line);\n      console.log(this.docVars[change.key]);\n      var docKey = parseFloat(change.line).toFixed(5)\n      if(change.delValue == undefined) {\n        console.log(\"change state : \" + change.key + \" - \"+ docKey + \" - \"+ change.value);\n        this.docVars[change.key][docKey] = change.value;  \n      } else {\n        console.log(\"change state : \" + change.key + \" - delete (\"+ docKey + \")\");\n        console.log(\"deleting\", this.docVars[change.key][docKey]);\n        delete this.docVars[change.key][docKey];\n      }\n    }\n\n    this.callback(); \n  }\n\n  buildState(message) {\n\n    const parsedState = JSON.parse(message.body);\n\n    console.log(parsedState);\n    for(var name in parsedState.integers) {\n      if(!(name in this.typeMap)) {\n        this.intVars[name] = parsedState.integers[name]; \n        this.typeMap[name] = DataType.int64;\n        console.log(\"building state int: \" + name + \" = \" + parsedState.integers[name]);\n      }\n    }\n    for(var name in parsedState.strings) {\n      if(!(name in this.typeMap)) {\n        this.strVars[name] = parsedState.strings[name]; \n        this.typeMap[name] = DataType.str;\n        console.log(\"building state str: \" + name + \" = \" + parsedState.strings[name]);\n      }\n    }\n    for(var name in parsedState.docs) {\n      if(!(name in this.typeMap)) {\n\n        var doc = {}\n        for(var key in parsedState.docs[name]) {\n          doc[parseFloat(key).toFixed(5)] = parsedState.docs[name][key];\n        }\n\n        this.docVars[name] = doc; \n        this.typeMap[name] = DataType.doc;\n        console.log(\"building state doc: \" + name + \" = \" + parsedState.docs[name]);\n      }\n    }\n\n    console.log(this);\n    this.callback(); \n  }\n\n}\n\nexport { State, DataType }; \n","import { subscribe, publish, initializeState, getState } from \"./relay\";\nimport { State, DataType } from \"./state\";\nimport { v4 as uuidv4 } from 'uuid';\n\n\nvar clientID = uuidv4();\nvar idToSessionMap = {};\nvar sessionToStateMap = {};\n\nasync function createSession(hostAddress) {\n    var requestOptions = {\n        method: 'POST',\n        redirect: 'follow'\n        };\n\n    try {\n        const sessionInfoResponse = await fetch(\"http://\" + hostAddress + \"/session\", requestOptions);\n        const sessionInfo = await sessionInfoResponse.json();\n        idToSessionMap[sessionInfo.id] = sessionInfo;\n        return sessionInfo;\n    } catch(error) { \n        throw(error);\n    }\n}\n\nasync function createReplicatedObject(hostAddress, definition, onChangeCallback) {\n    \n    var sessionInfo = await createSession(hostAddress);\n\n    var dsynkHubHost = sessionInfo.hub.ip + \":\" + sessionInfo.hub.port;\n    var state = new State(definition, clientID, sessionInfo.topic, dsynkHubHost, onChangeCallback);\n    var topic = sessionInfo.topic;\n\n    initializeState(dsynkHubHost, topic, clientID, \n                    definition, (message) => state.handle(message));\n    sessionToStateMap[sessionInfo.id] = state;\n    return [state,sessionInfo.id]; \n}\n\nasync function getSession(hostAddress, sessionId) {\n    var requestOptions = {\n        method: 'GET',\n        redirect: 'follow'\n        };\n\n    try {\n        const sessionInfoResponse = await fetch(\"http://\" + hostAddress + \"/session?id=\" + sessionId, requestOptions);\n        const sessionInfo = await sessionInfoResponse.json();\n        idToSessionMap[sessionInfo.id] = sessionInfo;\n        return sessionInfo;\n    } catch(error) { \n        throw(error);\n    }\n}\n\nasync function sendEvent(sessionId, event, hostAddress) {\n    try {\n        var sesssionInfo;\n        if(!(sessionId in idToSessionMap)) {\n            sesssionInfo = await getSession(hostAddress, sessionId);\n        } else {\n            sesssionInfo = idToSessionMap[sessionId];\n        }\n        var dsynkHubHost = sessionInfo.hub.ip + \":\" + sessionInfo.hub.port;\n        publish(dsynkHubHost, sesssionInfo.topic, clientID, event);\n\n    } catch(error) {\n        throw(error);\n    }\n}\n\nasync function getReplicatedObject(hostAddress, sessionId,onChangeCallback) {\n    var sessionInfo;\n    if(!(sessionId in idToSessionMap)) {\n        sessionInfo = await getSession(hostAddress, sessionId);\n    } else {\n        sessionInfo = idToSessionMap[sessionId];\n    }\n    var dsynkHubHost = sessionInfo.hub.ip + \":\" + sessionInfo.hub.port;\n    var state = new State({},clientID, sessionInfo.topic, dsynkHubHost,onChangeCallback); \n    sessionToStateMap[sessionInfo.id] = state;\n    getState(dsynkHubHost,\"/topic/client/\"+clientID, (message) => state.buildState(message), \n                            sessionInfo.topic, (message) => state.handle(message), \n                            clientID); \n    return state;\n}\n// async function joinSession(sessionId,handler) {\n//     try {\n//         var sesssionInfo;\n//         if(!(sessionId in idToSessionMap)) {\n//             sesssionInfo = await getSession(sessionId);\n//         } else {\n//             sesssionInfo = idToSessionMap[sessionId];\n//         }\n//         var dsynkHubHost = sessionInfo.hub.ip + \":\" + sessionInfo.hub.port;\n//         subscribe(dsynkHubHost, topic,handler);\n//     } catch (error) {\n//         throw(error);\n//     }\n// }\n\nexport{createReplicatedObject, getReplicatedObject};\n","import React from 'react';\nimport './App.css';\nimport MainPage from './component/MainPage.js'\nimport { Button, Grid, Input, Segment, Header, Icon } from 'semantic-ui-react'\nimport {createReplicatedObject, getReplicatedObject} from 'dsynk';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.sessionId = \"\"; \n  }\n\n\n  handleStateChange(app) {\n    app.setState(state => ({\n      'object': state.object,\n      'sessionid' : this.sessionId \n    }));  \n  }\n\n  createNewSession() {\n\n    //console.log(\"Creating new session\");\n\n    createReplicatedObject(\"dsynkmanager.eastus.azurecontainer.io:9090\",          \n    {\n        \"document\": {\"type\": \"str\", \"value\":\"Hello world\"}, \n        \"textarea\": {\"type\": \"doc\", \"value\":\"Hello world\"}\n    }, () => this.handleStateChange(this))\n    .then(session => {\n      this.setState(state => ({\n        'object': session[0],\n        'sessionid' : session[1] \n      }));\n      //console.log(\"Replicated Object Created\" + session);\n    }); \n  }\n\n  joinSession() {\n    getReplicatedObject(\"dsynkmanager.eastus.azurecontainer.io:9090\", this.sessionId, () => this.handleStateChange(this))\n    .then(session => {\n      this.setState(state => ({\n        'object': session,\n        'sessionid' : this.sessionId \n      }));\n    });\n  }\n\n  render() {\n\n    //console.log(\"render called on app\");\n\n    if(this.state.sessionid == undefined) {\n      return (\n        <div className=\"App\">\n          <div className=\"App-header\">\n            <div className=\"row\">\n                <div className=\"column\">\n                  <div className=\"ui text container inverted segment \">\n                    <Grid verticalAlign='middle' columns={1} centered>\n                      <Grid.Row>\n                        <Header inverted as='h1' icon textAlign='center' color='violet'>\n                          {/* <Icon name='users' circular /> */}\n                          <Header.Content>Dsynk Editor</Header.Content>\n                        </Header>\n                      </Grid.Row>\n                      <Grid.Row>\n                        <Button onClick={() => this.createNewSession()}>Create New Session</Button>\n                      </Grid.Row>\n                      <Grid.Row>\n                        <Segment inverted>\n                          <Input inverted \n                                 action={{ content: 'Join',  onClick: () => this.joinSession()}} \n                                 placeholder='Session id...' \n                                 onChange={e => this.sessionId = e.target.value }/>\n                        </Segment>\n                      </Grid.Row>\n                    </Grid>\n                  </div>\n                </div>\n            </div>          \n          </div>\n        </div>\n      );\n    } else {\n      return (\n\n        <div className=\"App\">\n          <MainPage state={this.state}/>\n        </div>\n      );\n    }\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}